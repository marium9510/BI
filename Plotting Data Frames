import pandas as pd
import numpy as np

hist=df.hist() //histogram of all data columns

hist=df.hist(“DAYS”) //for particular column

df.plot.scatter("SQFT","DAYS") //scatter plot for 2 columns

df.boxplot() //box plot for all columns

df.boxplot("SQFT“) //for a particular column

df.boxplot("SQFT","BATHS") //for a column by another column

boxplot = df.boxplot(column=['SALE_PRICE','DAYS','BATHS']) //for more than 1 column

//MSEXCEL and box plot using input
import pandas as pd
import numpy as np
file_loc=input('Enter Excel file Location=')
df=pd.read_excel(file_loc)
var=input('Which column you wanna choose for Boxplot')
boxplot = df.boxplot(column=[var])
print(boxplot)

//boxplot using matplot.lib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
df=pd.read_excel(r‘path\house price data - class
work.xls')
x=df["SALE_PRICE"]
fig = plt.figure(figsize =(10, 7))
plt.boxplot(x)
plt.show()

plt.boxplot(x,patch_artist=True,boxprops =dict(facecolor="blue"))

//Checking consistency
//need to test consistency of one dataset in the previous file titled ‘DAYS’
x=df.loc[:,"DAYS"] or x=df*‘DAYS’+
mx=x.mean()
sx=x.std()
print(mx)
print(sx)
cv=sx/mx*100
print("CV=",cv)
if cv>50 : print("less consistent")

//Correlation
c=df.corr()  //all correlations between numeric columns
print(c)

//getting correlation of a particular set of variables, we need to define arrays
import numpy as np
x=df.loc[:,"DAYS"] or x=df*‘DAYS’+
y=df.loc[:,"SQFT"] or y=df*‘SQFT’+
c=np.corrcoef(x,y)
print(c)

//correlation in pandas
df.corr()
df[‘DAYS’].corr(df[‘SQFT’]) //for two columns

//Linear regression
import pandas as pd
import scipy.stats
df=pd.read_excel(r‘house sale file with location')
x=df['DAYS']
y=df['SQFT']
result = scipy.stats.linregress(x, y)
print(result)

//OLS using stats model
import statsmodels.formula.api as sm
//a multiple linear regression model to predict the dependent variable SALE_PRICE based on two independent variables SQFT and DAYS
result = sm.ols(formula="SALE_PRICE ~ SQFT + DAYS", data=df).fit()
print(result.summary())
If we only need to print Model parameters, we can write: print(result.params)



